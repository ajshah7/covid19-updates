{"version":3,"sources":["assets/loading.gif","serviceWorker.js","index.js","App.js"],"names":["module","exports","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","useState","countryData","setCountryData","worldData","setWorldData","date","setDate","search","setSearch","useEffect","axios","get","res","data","updated","updatedDate","Date","day","getDate","getMonth","getFullYear","time","getHours","getMinutes","length","filter","item","country","toLowerCase","includes","Container","maxWidth","className","style","padding","Grid","container","md","xs","marginRight","display","alignItems","color","cases","Math","round","recovered","toFixed","deaths","placeholder","onChange","e","target","value","map","recoveredRate","deathsRate","nationCode","countryCode","find","name","Name","image","Code","src","width","alt","margin","backgroundColor","href","require","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"oqRAAAA,EAAOC,QAAU,IAA0B,qC,4ICY3C,IAAMC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MCzFjEC,IAASC,OAAO,mBCDD,WAAgB,IAAD,EACUC,mBAAS,IADnB,mBACrBC,EADqB,KACRC,EADQ,OAEMF,mBAAS,IAFf,mBAErBG,EAFqB,KAEVC,EAFU,OAGJJ,mBAAS,eAHL,mBAGrBK,EAHqB,KAGfC,EAHe,OAIAN,mBAAS,IAJT,mBAIrBO,EAJqB,KAIbC,EAJa,KAM5BC,qBAAU,WACRC,IAAMC,IAAI,uCAAuC3B,MAAK,SAAA4B,GACpDV,EAAe,YAAIU,EAAIC,UAGzBH,IAAMC,IAAI,iCAAiC3B,MAAK,SAAA4B,GAC9CpB,QAAQC,IAAI,MAAOmB,EAAIC,MACvBT,EAAaQ,EAAIC,MACjBP,EAAQM,EAAIC,KAAKC,cAElB,IAEH,IAIID,EAAOZ,EACPc,EAAc,IAAIC,KAAKX,GACvBY,EAAMF,EAAYG,UAAY,KAAOH,EAAYI,WAAa,GAAK,IAAMJ,EAAYK,cACrFC,EAAON,EAAYO,WAAa,MAAQP,EAAYQ,aAWxD,OALEV,EAJEN,EAAOiB,OAAS,EACCvB,EAAYwB,QAAO,SAAAC,GAAI,OACxCA,EAAKC,QAAQC,cAAcC,SAAStB,EAAOqB,kBAItC3B,EAIP,kBAAC6B,EAAA,EAAD,CACEC,SAAS,KACTC,UAAU,gBACVC,MAAO,CAAEC,QAAS,SAEjBjC,EAAYuB,OAAS,EACpB,kBAACW,EAAA,EAAD,CAAMC,WAAS,GACb,kBAACD,EAAA,EAAD,CAAMT,MAAI,EAACW,GAAI,EAAGC,GAAI,GAAIL,MAAO,CAACM,YAAY,SAC5C,wBAAIP,UAAU,eAAd,YACA,wBAAIA,UAAU,eAAd,aAGF,kBAACG,EAAA,EAAD,CACET,MAAI,EACJW,GAAI,EACJC,GAAI,GACJL,MAAO,CACLO,QAAS,OACTC,WAAY,aAGd,kBAACN,EAAA,EAAD,CAAMC,WAAS,GACb,kBAACD,EAAA,EAAD,CAAMT,MAAI,EAACW,GAAI,EAAGC,GAAI,GACpB,yBAAKN,UAAU,mBACb,6BACE,uBACEA,UAAU,UACVC,MAAO,CAAES,MAAO,YAFlB,eAMA,uBAAGV,UAAU,cAAcC,MAAO,CAAES,MAAO,YACxCvC,EAAUwC,UAKnB,kBAACR,EAAA,EAAD,CAAMT,MAAI,EAACW,GAAI,EAAGC,GAAI,GACpB,yBAAKN,UAAU,mBACb,6BACE,uBACEA,UAAU,UACVC,MAAO,CAAES,MAAO,YAFlB,iBAMA,uBAAGV,UAAU,cAAcC,MAAO,CAAES,MAAO,aAEvCE,KAAKC,MACD,IAAM1C,EAAU2C,UAChB3C,EAAUwC,MACV,KACA,KACJI,QAAQ,GAAI,IAPhB,QAcN,kBAACZ,EAAA,EAAD,CAAMT,MAAI,EAACW,GAAI,EAAGC,GAAI,GACpB,yBAAKN,UAAU,mBACb,6BACE,uBACEA,UAAU,UACVC,MAAO,CAAES,MAAO,YAFlB,cAMA,uBAAGV,UAAU,cAAcC,MAAO,CAAES,MAAO,YACxCE,KAAKC,MACF,IAAM1C,EAAU6C,OAAU7C,EAAUwC,MACpC,KACA,IAAK,IAJX,UAaV,kBAACR,EAAA,EAAD,CAAMT,MAAI,EAACW,GAAI,IACb,2BACEL,UAAU,YACViB,YAAY,qBACZC,SAzGS,SAAAC,GACnB3C,EAAU2C,EAAEC,OAAOC,WA4Gb,kBAAClB,EAAA,EAAD,CAAMT,MAAI,EAACW,GAAI,GAAIC,GAAI,GAAIN,UAAU,mBACnC,kBAACG,EAAA,EAAD,CAAMC,WAAS,GACb,kBAACD,EAAA,EAAD,CAAMT,MAAI,EAACY,GAAI,GAAID,GAAI,EAAGL,UAAU,cAClC,uBAAGA,UAAU,WAAb,YAGF,kBAACG,EAAA,EAAD,CAAMT,MAAI,EAACW,GAAI,EAAGC,GAAI,EAAGN,UAAU,cACjC,uBAAGA,UAAU,WAAb,UAGF,kBAACG,EAAA,EAAD,CAAMT,MAAI,EAACW,GAAI,EAAGC,GAAI,EAAGN,UAAU,cACjC,uBAAGA,UAAU,WAAb,cAGF,kBAACG,EAAA,EAAD,CAAMT,MAAI,EAACW,GAAI,EAAGC,GAAI,EAAGN,UAAU,cACjC,uBAAGA,UAAU,WAAb,kBAGF,kBAACG,EAAA,EAAD,CAAMT,MAAI,EAACW,GAAI,EAAGC,GAAI,EAAGN,UAAU,cACjC,uBAAGA,UAAU,WAAb,iBAKLnB,EAAKW,OAAS,EACbX,EAAKyC,KAAI,SAAA5B,GACP,IAAI6B,GACFX,KAAKC,MAAQ,IAAMnB,EAAKoB,UAAapB,EAAKiB,MAAS,KAAO,KAC1DI,QAAQ,GACNS,GACFZ,KAAKC,MAAQ,IAAMnB,EAAKsB,OAAUtB,EAAKiB,MAAS,KAAO,KACvDI,QAAQ,GACJU,EAAaC,EAAYC,MAAK,SAAAC,GAClC,OAAOA,EAAKC,OAASnC,EAAKC,WAGxBmC,EAAK,sCACPL,EAAaA,EAAWM,KAAO,KADxB,iBAIT,OACE,kBAAC5B,EAAA,EAAD,CAAMT,MAAI,EAACW,GAAI,IACb,kBAACF,EAAA,EAAD,CAAMC,WAAS,GACb,kBAACD,EAAA,EAAD,CAAMT,MAAI,EAACY,GAAI,GAAID,GAAI,EAAGL,UAAU,cAClC,yBACEgC,IAAKF,EACLG,MAAM,OACNC,IAAI,OACJjC,MAAO,CAAEkC,OAAQ,MAAO5B,YAAa,UAEvC,uBAAGP,UAAU,UAAUN,EAAKC,UAE9B,kBAACQ,EAAA,EAAD,CAAMT,MAAI,EAACY,GAAI,EAAGD,GAAI,EAAGL,UAAU,cACjC,yBAAKA,UAAU,qBACb,6BACE,uBAAGA,UAAU,qBAAb,SACA,uBAAGA,UAAU,UAAUN,EAAKiB,UAIlC,kBAACR,EAAA,EAAD,CAAMT,MAAI,EAACY,GAAI,EAAGD,GAAI,EAAGL,UAAU,cACjC,yBAAKA,UAAU,qBACb,6BACE,uBAAGA,UAAU,qBAAb,aAGA,uBAAGA,UAAU,UAAUN,EAAKoB,WAAe,OAIjD,kBAACX,EAAA,EAAD,CAAMT,MAAI,EAACY,GAAI,EAAGD,GAAI,EAAGL,UAAU,cACjC,yBACEA,UAAU,oBACVC,MAAO,CAAEmC,gBAAiB,YAE1B,6BACE,uBAAGpC,UAAU,qBAAb,YAGA,uBAAGA,UAAU,UAAUuB,EAAvB,MAA4C,OAIlD,kBAACpB,EAAA,EAAD,CAAMT,MAAI,EAACY,GAAI,EAAGD,GAAI,EAAGL,UAAU,cACjC,yBACEA,UAAU,oBACVC,MAAO,CAAEmC,gBAAiB,YAE1B,6BACE,uBAAGpC,UAAU,qBAAb,SACA,uBAAGA,UAAU,UAAUwB,EAAvB,cASd,sCAGF,kBAACrB,EAAA,EAAD,CACET,MAAI,EACJY,GAAI,GACJD,GAAI,GACJL,UAAU,UAEV,6BACA,uBAAGA,UAAU,eAAb,iCAGA,uBAAGA,UAAU,eAAb,iBAEC,MAEAX,EACA,MALD,IAOC,MAEAJ,GAED,uBAAGe,UAAU,eAAb,eACY,uBAAGoB,OAAO,QAAQiB,KAAK,oCAAvB,sBAKd,yBAAKrC,UAAU,iBAGjB,kBAACG,EAAA,EAAD,CAAMH,UAAU,kBACd,yBAAKgC,IAAKM,EAAQ,IAAyBJ,IAAI,MAAMD,MAAM,aDnQrD,MAASM,SAASC,eAAe,SDe1C,SAAkB5F,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI4F,IAAIC,mBAAwBpG,OAAOC,SAAS8F,MACpDM,SAAWrG,OAAOC,SAASoG,OAIvC,OAGFrG,OAAOsG,iBAAiB,QAAQ,WAC9B,IAAMjG,EAAK,UAAM+F,mBAAN,sBAEPtG,IAgEV,SAAiCO,EAAOC,GAEtCiG,MAAMlG,EAAO,CACXmG,QAAS,CAAE,iBAAkB,YAE5B9F,MAAK,SAAA+F,GAEJ,IAAMC,EAAcD,EAASD,QAAQnE,IAAI,gBAEnB,MAApBoE,EAASE,QACO,MAAfD,IAA8D,IAAvCA,EAAYE,QAAQ,cAG5CrG,UAAUC,cAAcqG,MAAMnG,MAAK,SAAAC,GACjCA,EAAamG,aAAapG,MAAK,WAC7BV,OAAOC,SAAS8G,eAKpB3G,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFA6F,CAAwB3G,EAAOC,GAI/BC,UAAUC,cAAcqG,MAAMnG,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OCzC/BE,K","file":"static/js/main.8ec72ad3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.fdd46a1f.gif\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\nserviceWorker.register();\r\n\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Grid, Container } from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport \"./index.css\";\r\nimport countryCode from \"./code\";\r\n\r\nexport default function App() {\r\n  const [countryData, setCountryData] = useState([]);\r\n  const [worldData, setWorldData] = useState({});\r\n  const [date, setDate] = useState(1584724653093);\r\n  const [search, setSearch] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    axios.get(\"https://corona.lmao.ninja/countries\").then(res => {\r\n      setCountryData([...res.data]);\r\n    });\r\n\r\n    axios.get(\"https://corona.lmao.ninja/all\").then(res => {\r\n      console.log(\"res\", res.data);\r\n      setWorldData(res.data);\r\n      setDate(res.data.updated);\r\n    });\r\n  }, []);\r\n\r\n  const handleChnage = e => {\r\n    setSearch(e.target.value);\r\n  };\r\n\r\n  let data = countryData;\r\n  var updatedDate = new Date(date)\r\n  var day = updatedDate.getDate() + '-' + (updatedDate.getMonth() + 1) + '-' + updatedDate.getFullYear();\r\n  var time = updatedDate.getHours() + ' : ' + updatedDate.getMinutes();\r\n\r\n  if (search.length > 0) {\r\n    let searchResult = countryData.filter(item =>\r\n      item.country.toLowerCase().includes(search.toLowerCase())\r\n    );\r\n    data = searchResult;\r\n  } else {\r\n    data = countryData;\r\n  }\r\n\r\n  return (\r\n    <Container\r\n      maxWidth=\"lg\"\r\n      className=\"app-container\"\r\n      style={{ padding: \"50px\" }}\r\n    >\r\n      {countryData.length > 0 ? (\r\n        <Grid container>\r\n          <Grid item md={4} xs={12} style={{marginRight:\"10px\"}}>\r\n            <h1 className=\"heading-one\">COVID19 </h1>\r\n            <h1 className=\"heading-two\">UPDATES </h1>\r\n          </Grid>\r\n\r\n          <Grid\r\n            item\r\n            md={7}\r\n            xs={12}\r\n            style={{\r\n              display: \"flex\",\r\n              alignItems: \"flex-end\"\r\n            }}\r\n          >\r\n            <Grid container>\r\n              <Grid item md={3} xs={4}>\r\n                <div className=\"world-data-item\">\r\n                  <div>\r\n                    <p\r\n                      className=\"caption\"\r\n                      style={{ color: \"#2980b9\" }}\r\n                    >\r\n                      Total Cases\r\n                    </p>\r\n                    <p className=\"title-large\" style={{ color: \"#2980b9\" }}>\r\n                      {worldData.cases}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </Grid>\r\n              <Grid item md={3} xs={4}>\r\n                <div className=\"world-data-item\">\r\n                  <div>\r\n                    <p\r\n                      className=\"caption\"\r\n                      style={{ color: \"#27ae60\" }}\r\n                    >\r\n                      Recovery Rate\r\n                    </p>\r\n                    <p className=\"title-large\" style={{ color: \"#27ae60\" }}>\r\n                      {(\r\n                        Math.round(\r\n                          ((100 * worldData.recovered) /\r\n                            worldData.cases) *\r\n                            100\r\n                        ) / 100\r\n                      ).toFixed(2)}{\" \"}\r\n                      %\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </Grid>\r\n\r\n              <Grid item md={3} xs={4}>\r\n                <div className=\"world-data-item\">\r\n                  <div>\r\n                    <p\r\n                      className=\"caption\"\r\n                      style={{ color: \"#e74c3c\" }}\r\n                    >\r\n                      Death Rate\r\n                    </p>\r\n                    <p className=\"title-large\" style={{ color: \"#e74c3c\" }}>\r\n                      {Math.round(\r\n                        ((100 * worldData.deaths) / worldData.cases) *\r\n                          100\r\n                      ) / 100}{\" \"}\r\n                      %\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid item md={12}>\r\n            <input\r\n              className=\"input-box\"\r\n              placeholder=\"Search Country....\"\r\n              onChange={handleChnage}\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item md={12} xs={12} className=\"heading-wrapper\">\r\n            <Grid container>\r\n              <Grid item xs={12} md={4} className=\"flex-start\">\r\n                <p className=\"caption\">Country</p>\r\n              </Grid>\r\n\r\n              <Grid item md={2} xs={3} className=\"flex-start\">\r\n                <p className=\"caption\">Cases</p>\r\n              </Grid>\r\n\r\n              <Grid item md={2} xs={3} className=\"flex-start\">\r\n                <p className=\"caption\">Recovered</p>\r\n              </Grid>\r\n\r\n              <Grid item md={2} xs={3} className=\"flex-start\">\r\n                <p className=\"caption\">Recovery Rate</p>\r\n              </Grid>\r\n\r\n              <Grid item md={2} xs={3} className=\"flex-start\">\r\n                <p className=\"caption\">Death Rate</p>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          {data.length > 0 ? (\r\n            data.map(item => {\r\n              let recoveredRate = (\r\n                Math.round(((100 * item.recovered) / item.cases) * 100) / 100\r\n              ).toFixed(2);\r\n              let deathsRate = (\r\n                Math.round(((100 * item.deaths) / item.cases) * 100) / 100\r\n              ).toFixed(2);\r\n              const nationCode = countryCode.find(name => {\r\n                return name.Name === item.country;\r\n              });\r\n\r\n              let image = `https://www.countryflags.io/${\r\n                nationCode ? nationCode.Code : null\r\n              }/shiny/64.png`;\r\n\r\n              return (\r\n                <Grid item md={12}>\r\n                  <Grid container>\r\n                    <Grid item xs={12} md={4} className=\"flex-start\">\r\n                      <img\r\n                        src={image}\r\n                        width=\"50px\"\r\n                        alt=\"flag\"\r\n                        style={{ margin: \"3px\", marginRight: \"20px\" }}\r\n                      />\r\n                      <p className=\"titile\">{item.country}</p>\r\n                    </Grid>\r\n                    <Grid item xs={3} md={2} className=\"flex-start\">\r\n                      <div className=\"country-data-item\">\r\n                        <div>\r\n                          <p className=\"caption text-hide\">Cases</p>\r\n                          <p className=\"titile\">{item.cases}</p>\r\n                        </div>\r\n                      </div>\r\n                    </Grid>\r\n                    <Grid item xs={3} md={2} className=\"flex-start\">\r\n                      <div className=\"country-data-item\">\r\n                        <div>\r\n                          <p className=\"caption text-hide\">\r\n                            Recovered\r\n                          </p>\r\n                          <p className=\"titile\">{item.recovered}</p>{\" \"}\r\n                        </div>\r\n                      </div>\r\n                    </Grid>\r\n                    <Grid item xs={3} md={2} className=\"flex-start\">\r\n                      <div\r\n                        className=\"country-data-item\"\r\n                        style={{ backgroundColor: \"#27ae60\" }}\r\n                      >\r\n                        <div>\r\n                          <p className=\"caption text-hide\">\r\n                            Recovery\r\n                          </p>\r\n                          <p className=\"titile\">{recoveredRate} %</p>{\" \"}\r\n                        </div>\r\n                      </div>\r\n                    </Grid>\r\n                    <Grid item xs={3} md={2} className=\"flex-start\">\r\n                      <div\r\n                        className=\"country-data-item\"\r\n                        style={{ backgroundColor: \"#e74c3c\" }}\r\n                      >\r\n                        <div>\r\n                          <p className=\"caption text-hide\">Death</p>\r\n                          <p className=\"titile\">{deathsRate} %</p>\r\n                        </div>\r\n                      </div>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n              );\r\n            })\r\n          ) : (\r\n            <p>loading</p>\r\n          )}\r\n\r\n          <Grid\r\n            item\r\n            xs={12}\r\n            md={12}\r\n            className=\"footer\"\r\n          >\r\n            <div>\r\n            <p className=\"footer-text\">\r\n            Source from worldometers.info\r\n            </p>\r\n            <p className=\"footer-text\">\r\n          Last update at\r\n            {\"   \"}\r\n             \r\n            {time}\r\n            {\"   \"} \r\n             &\r\n            {\"   \"}\r\n                \r\n            {day} \r\n            </p>\r\n            <p className=\"footer-text\">\r\n            Created  by <a target=\"blank\" href=\"http://linkedin.com/in/muqsithck\" >  Abdul Muqsith</a>\r\n            </p>\r\n            </div>\r\n          </Grid>\r\n\r\n          <div className=\"app-wrapper\"></div>\r\n        </Grid>\r\n      ) : (\r\n        <Grid className=\"loading-screen\">\r\n          <img src={require(\"./assets/loading.gif\")} alt=\"gif\" width=\"40px\" />\r\n        </Grid>\r\n      )}\r\n    </Container>\r\n  );\r\n}\r\n"],"sourceRoot":""}