{"version":3,"sources":["serviceWorker.js","index.js","App.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","useState","coronaData","setCoronaData","search","setSearch","useEffect","axios","get","res","data","countryList","length","filter","item","country","toLowerCase","includes","Container","maxWidth","className","style","padding","Grid","container","md","placeholder","onChange","e","target","value","xs","map","recoveredRate","Math","round","recovered","cases","toFixed","deathsRate","deaths","nationCode","countryCode","find","name","Name","image","Code","src","width","alt","margin","marginRight","backgroundColor","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a6fa925b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\nserviceWorker.register();\r\n\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Grid, Container } from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport \"./index.css\";\r\nimport countryCode from \"./code\";\r\n\r\nexport default function App() {\r\n  const [coronaData, setCoronaData] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n\r\n  const handleChnage = e => {\r\n    setSearch(e.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    axios.get(\"https://corona.lmao.ninja/countries\").then(res => {\r\n      setCoronaData([...res.data]);\r\n    });\r\n  }, []);\r\n\r\n  let countryList = coronaData\r\n\r\n  if (search.length > 0) {\r\n    let searchResult = coronaData.filter(item =>\r\n      item.country.toLowerCase().includes(search.toLowerCase())\r\n    );\r\n    countryList = searchResult;\r\n  } else {\r\n    countryList = coronaData;\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" className=\"app-container\"  style={{ padding: \"50px\" }}>\r\n      <Grid container>\r\n        <Grid item md={4}>\r\n          <h1 className=\"heading\">COVID19 </h1>\r\n          <h1 className=\"heading-main\"> UPDATES </h1>\r\n        </Grid>\r\n        <Grid item md={8}></Grid>\r\n\r\n        <Grid item md={12}>\r\n          <input\r\n            className=\"input-box\"\r\n            placeholder=\"Search Country....\"\r\n            onChange={handleChnage}\r\n          />\r\n        </Grid>\r\n\r\n        <Grid item md={12} xs={12} className=\"heading-wrapper\" >\r\n          <Grid container>\r\n            <Grid item xs={12} md={4} className=\"flex-start heading-wrapper\">\r\n              <p className=\"item-count-heading\">Country</p>\r\n            </Grid>\r\n\r\n            <Grid item md={2} xs={3} className=\"flex-start\"\r\n           \r\n            >\r\n              <p className=\"item-count-heading\">Cases</p>\r\n            </Grid>\r\n\r\n            <Grid item md={2} xs={3} className=\"flex-start\">\r\n              <p className=\"item-count-heading\">Recovered</p>\r\n            </Grid>\r\n\r\n            <Grid item md={2} xs={3} className=\"flex-start\">\r\n              <p className=\"item-count-heading\">Recovery Rate</p>\r\n            </Grid>\r\n\r\n            <Grid item md={2} xs={3} className=\"flex-start\">\r\n              <p className=\"item-count-heading\">Death Rate</p>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n\r\n\r\n\r\n\r\n        {countryList.length > 0 ? (\r\n          countryList.map(item => {\r\n            let recoveredRate =  (Math.round((100 * item.recovered) / item.cases * 100) / 100).toFixed(2)\r\n            let deathsRate = (Math.round((100 * item.deaths) / item.cases * 100) / 100).toFixed(2)\r\n          \r\n            \r\n            \r\n\r\n\r\n            const nationCode = countryCode.find(name => {\r\n              return name.Name === item.country;\r\n            });\r\n\r\n            let image = `https://www.countryflags.io/${\r\n              nationCode ? nationCode.Code : null\r\n            }/shiny/64.png`;\r\n            \r\n\r\n            return (\r\n              <Grid item md={12}>\r\n                <Grid container>\r\n                  <Grid item xs={12} md={4} className=\"flex-start\">\r\n                    <img\r\n                      src={image}\r\n                      width=\"50px\"\r\n                      alt=\"flag\"\r\n                      style={{ margin: \"3px\", marginRight: \"20px\" }}\r\n                    />\r\n                    <p className=\"item-count-text\">{item.country}</p>\r\n                  </Grid>\r\n                  <Grid item xs={3} md={2} className=\"flex-start\">\r\n                    <div className=\"item-count\">\r\n                      <div>\r\n                      <p className=\"item-count-heading text-hide\">Cases</p>\r\n                      <p className=\"item-count-text\">{item.cases}</p>\r\n                    </div>\r\n                    </div>\r\n                  </Grid>\r\n                  <Grid item xs={3} md={2} className=\"flex-start\">\r\n                    <div className=\"item-count\">\r\n                    <div>\r\n                      <p className=\"item-count-heading text-hide\">Recovered</p>\r\n                      <p className=\"item-count-text\">{item.recovered}</p>{\" \"}\r\n                      </div>\r\n                    </div>\r\n                  </Grid>\r\n                  <Grid item xs={3} md={2} className=\"flex-start\">\r\n                    <div\r\n                      className=\"item-count\"\r\n                      style={{ backgroundColor: \"#27ae60\" }}\r\n                    >\r\n                       <div>\r\n                      <p className=\"item-count-heading text-hide\">Recovery</p>\r\n                      <p className=\"item-count-text\">{recoveredRate} %</p>{\" \"}\r\n                    </div>\r\n                    </div>\r\n                  </Grid>\r\n                  <Grid item xs={3} md={2} className=\"flex-start\">\r\n                    <div\r\n                      className=\"item-count\"\r\n                      style={{ backgroundColor: \"#e74c3c\" }}\r\n                    >\r\n                      <div>\r\n                      <p className=\"item-count-heading text-hide\">Death</p>\r\n                      <p className=\"item-count-text\">{deathsRate} %</p>\r\n                      </div>\r\n                    </div>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            );\r\n          })\r\n        ) : (\r\n          <p>loading</p>\r\n        )}\r\n\r\n        <div className=\"app-wrapper\"></div>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n}\r\n"],"sourceRoot":""}